// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id=$1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, username, refresh_token, expires_at, created_at
FROM sessions
WHERE id=$1
`

type GetSessionRow struct {
	ID           uuid.UUID
	Username     string
	RefreshToken string
	ExpiresAt    pgtype.Timestamptz
	CreatedAt    pgtype.Timestamptz
}

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one








SELECT id, username, email, dob, gender, created_time, updated_time 
FROM users
WHERE id=$1
`

type GetUserRow struct {
	ID          uuid.UUID
	Username    string
	Email       string
	Dob         pgtype.Date
	Gender      Gender
	CreatedTime pgtype.Timestamptz
	UpdatedTime pgtype.Timestamptz
}

// -- name: InsertLikes :exec
// INSERT INTO likes(
//
//	id, user_id, tweets_id
//
// ) VALUES(
//
//	$1, $2, $3
//
// );
// -- name: DeleteLikes :exec
// DELETE FROM likes
// WHERE user_id=$1 AND tweets_id=$2;
// -- name: InsertTweets :exec
// INSERT INTO tweets(
//
//	id, user_id, hashtag, content
//
// ) VALUES(
//
//	$1, $2, $3, $4
//
// );
// -- name: UpdateTweets :exec
// UPDATE tweets
// SET
//
//	hashtag=$2,
//	content=$3,
//	updated_time=$4
//
// WHERE id=$1;
// -- name: InsertVideos :exec
// INSERT INTO videos (
//
//	id, name, url, length, size
//
// ) VALUES (
//
//	$1, $2, $3, $4, $5
//
// );
// -- name: InsertImages :exec
// INSERT INTO images(
//
//	id, name, url, size
//
// ) VALUES(
//
//	$1, $2, $3, $4
//
// );
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Dob,
		&i.Gender,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, dob, gender, created_time, updated_time 
FROM users
WHERE email=$1
`

type GetUserByEmailRow struct {
	ID          uuid.UUID
	Username    string
	Email       string
	Password    string
	Dob         pgtype.Date
	Gender      Gender
	CreatedTime pgtype.Timestamptz
	UpdatedTime pgtype.Timestamptz
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Dob,
		&i.Gender,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :exec
INSERT INTO sessions(
     ref_token_id, username, refresh_token, expires_at
)VALUES(
    $1, $2, $3, $4
)
`

type InsertSessionParams struct {
	RefTokenID   string
	Username     string
	RefreshToken string
	ExpiresAt    pgtype.Timestamptz
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) error {
	_, err := q.db.Exec(ctx, insertSession,
		arg.RefTokenID,
		arg.Username,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users(
     username, email, dob, gender, password
)VALUES(
    $1, $2, $3, $4, $5
) RETURNING id
`

type InsertUserParams struct {
	Username string
	Email    string
	Dob      pgtype.Date
	Gender   Gender
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.Email,
		arg.Dob,
		arg.Gender,
		arg.Password,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

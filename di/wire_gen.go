// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"lintang/go_hertz_template/biz/dal/db"
	"lintang/go_hertz_template/biz/service"
	"lintang/go_hertz_template/biz/util/jwt"
	"lintang/go_hertz_template/config"
)

// Injectors from wire.go:

func InitUserService(pg *db.Postgres, cfg *config.Config) *service.UserService {
	userRepository := db.NewUserRepo(pg)
	userService := service.NewUserService(userRepository)
	return userService
}

func InitAuthService(pg *db.Postgres, cfg *config.Config) *service.AuthService {
	sessionRepository := db.NewSessionRepo(pg)
	jwtMaker := jwt.NewJWTMaker(cfg)
	userRepository := db.NewUserRepo(pg)
	authService := service.NewAuthService(sessionRepository, jwtMaker, userRepository)
	return authService
}

// wire.go:

var ProviderSet wire.ProviderSet = wire.NewSet(service.NewUserService, db.NewUserRepo, wire.Bind(new(service.UserRepository), new(*db.UserRepository)))

var ProviderSetAuth wire.ProviderSet = wire.NewSet(service.NewAuthService, jwt.NewJWTMaker, db.NewUserRepo, db.NewSessionRepo, wire.Bind(new(service.UserRepository), new(*db.UserRepository)), wire.Bind(new(service.SessionRepo), new(*db.SessionRepository)), wire.Bind(new(jwt.JwtTokenMaker), new(*jwt.JWTMaker)))

// Code generated by hertz generator.

package main

import (
	"fmt"
	"net"
	"time"

	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/route"
	"github.com/hertz-contrib/logger/accesslog"
	"github.com/hertz-contrib/pprof"

	"lintang/go_hertz_template/biz/dal"
	"lintang/go_hertz_template/biz/router"
	"lintang/go_hertz_template/biz/util/jwt"
	"lintang/go_hertz_template/config"
	"lintang/go_hertz_template/di"
	"lintang/go_hertz_template/pkg"

	"github.com/cloudwego/kitex/pkg/transmeta"
	kitexServer "github.com/cloudwego/kitex/server"

	"github.com/cloudwego/hertz/pkg/app/server"
	_ "github.com/jackc/pgx/v5/stdlib"
)

func main() {
	cfg, err := config.NewConfig()
	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}
	logsCores := pkg.InitZapLogger(cfg)
	defer logsCores.Sync()
	hlog.SetLogger(logsCores)

	// init data access layer
	pg := dal.InitMysql(cfg) // init postgres & rabbitmq

	// validation error custom
	customValidationErr := pkg.CreateCustomValidationError()
	h := server.Default(
		server.WithHostPorts(fmt.Sprintf(`0.0.0.0:%s`, cfg.HTTP.Port)),
		server.WithValidateConfig(customValidationErr),
		server.WithExitWaitTime(4*time.Second),
		server.WithValidateConfig(pkg.PasswordValidator()),
	)

	h.Use(accesslog.New())

	pprof.Register(h)
	var callback []route.CtxCallback

	callback = append(callback, pg.ClosePostgres)
	h.Engine.OnShutdown = append(h.Engine.OnShutdown, callback...) /// graceful shutdown
	uSvc := di.InitUserService(pg, cfg)
	aSvc := di.InitAuthService(pg, cfg)
	jwt := jwt.NewJWTMaker(cfg)
	router.UserRouter(h, uSvc, jwt)
	router.AuthRouter(h, aSvc)

	addr, _ := net.ResolveTCPAddr("tcp", fmt.Sprintf(`127.0.0.1:%s`, cfg.GRPC.URLGrpc)) // grpc address
	var opts []kitexServer.Option
	opts = append(opts, kitexServer.WithMetaHandler(transmeta.ServerHTTP2Handler))
	opts = append(opts, kitexServer.WithServiceAddr(addr))

	// start hertz http server
	h.Spin()

}
